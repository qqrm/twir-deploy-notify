name: 'Setup Rust'
description: 'Checkout repository, setup cache and toolchain'
inputs:
  toolchain:
    description: 'Rust toolchain'
    required: false
    default: ''
runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
    - id: determine
      shell: bash
      run: |
        set -euo pipefail

        if [ -n "${{ inputs.toolchain }}" ]; then
          echo "toolchain=${{ inputs.toolchain }}" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        resolve_toolchain() {
          local toolchain_file="rust-toolchain.toml"

          if [ -f "$toolchain_file" ]; then
            local channel
            channel=$(sed -n 's/^[[:space:]]*channel[[:space:]]*=[[:space:]]*"\([^"\n]*\)".*/\1/p' "$toolchain_file" | head -n 1)

            if [ -z "$channel" ]; then
              echo 'rust-toolchain.toml is missing channel entry' >&2
              return 1
            fi

            printf '%s\n' "$channel"
            return 0
          fi

          local metadata
          if ! metadata=$(curl -fsSL "https://static.rust-lang.org/dist/channel-rust-stable.toml"); then
            echo 'failed to download stable channel metadata' >&2
            return 1
          fi

          local version_line
          version_line=$(printf '%s\n' "$metadata" | awk '
            /^\[pkg\.rust\]/ { in_pkg = 1; next }
            /^\[/ { in_pkg = 0 }
            in_pkg && $1 ~ /^version$/ { print; exit }
          ')

          local version
          version=$(printf '%s\n' "$version_line" | sed -n 's/^[[:space:]]*version[[:space:]]*=[[:space:]]*"\([^"\n]*\)".*/\1/p')

          if [ -z "$version" ]; then
            echo 'failed to resolve stable toolchain version' >&2
            return 1
          fi

          version=${version%% *}
          printf '%s\n' "$version"
        }

        if ! toolchain=$(resolve_toolchain); then
          echo 'failed to resolve toolchain version' >&2
          exit 1
        fi

        echo "toolchain=$toolchain" >> "$GITHUB_OUTPUT"
    - uses: actions/cache@v4
      with:
        path: |
          ~/.cargo
          target
        key: ${{ runner.os }}-${{ steps.determine.outputs.toolchain }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ steps.determine.outputs.toolchain }}-
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ steps.determine.outputs.toolchain }}
        profile: minimal
    - run: rustup component add --toolchain ${{ steps.determine.outputs.toolchain }} clippy rustfmt
      shell: bash
