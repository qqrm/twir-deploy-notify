name: Auto merge

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  merge:
    if: >-
      (github.event_name == 'workflow_run' &&
        (github.event.workflow_run.conclusion == 'success' ||
         github.event.workflow_run.conclusion == 'skipped' ||
         github.event.workflow_run.conclusion == 'neutral')) ||
      (github.event_name == 'check_suite' &&
        (github.event.check_suite.conclusion == 'success' ||
         github.event.check_suite.conclusion == 'skipped' ||
         github.event.check_suite.conclusion == 'neutral'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = (context.payload.workflow_run && context.payload.workflow_run.pull_requests[0]) ||
              (context.payload.check_suite && context.payload.check_suite.pull_requests[0]);
            core.setOutput('number', pr ? pr.number : '');
      - name: Wait for checks
        if: steps.pr.outputs.number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const { owner, repo } = context.repo;
            const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            const ref = pr.data.head.sha;
            const branch = pr.data.base.ref;
            const protection = await github.request(
              'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
              { owner, repo, branch }
            );
            const required = protection.data.contexts;
            const wait = ms => new Promise(r => setTimeout(r, ms));

            for (const ctx of required) {
              while (true) {
                const checks = await github.rest.checks.listForRef({ owner, repo, ref, check_name: ctx });
                const run = checks.data.check_runs[0];
                const conclusion = run?.conclusion;
                if (!conclusion || conclusion === 'queued' || conclusion === 'in_progress') {
                  await wait(5000);
                  continue;
                }
                if (conclusion !== 'success' && conclusion !== 'skipped') {
                  core.setFailed(`Required check ${ctx} concluded with ${conclusion}`);
                }
                break;
              }
            }
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
      - name: Merge primary PR
        if: steps.pr.outputs.number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ steps.pr.outputs.number }}
        run: |
          gh pr merge "$PR" --rebase --delete-branch || \
          gh pr merge "$PR" --squash --delete-branch
      - name: Rebase and merge remaining PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for n in $(gh pr list --state open --json number -q '.[].number'); do
            if [ "$n" != "${{ steps.pr.outputs.number }}" ]; then
              gh pr checkout "$n"
              git pull --rebase origin main || continue
              git push --force-with-lease
              gh pr merge "$n" --rebase --delete-branch || \
              gh pr merge "$n" --squash --delete-branch || true
            fi
          done
