name: TWIR Auto merge

on:
  workflow_run:
    workflows: ["TWIR CI"]
    types:
      - completed
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  merge:
    if: >-
      (github.event_name == 'workflow_run' &&
        (github.event.workflow_run.conclusion == 'success' ||
         github.event.workflow_run.conclusion == 'skipped' ||
         github.event.workflow_run.conclusion == 'neutral')) ||
      (github.event_name == 'check_suite' &&
        (github.event.check_suite.conclusion == 'success' ||
         github.event.check_suite.conclusion == 'skipped' ||
         github.event.check_suite.conclusion == 'neutral'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = (context.payload.workflow_run && context.payload.workflow_run.pull_requests[0]) ||
              (context.payload.check_suite && context.payload.check_suite.pull_requests[0]);
            if (pr) {
              core.setOutput('number', pr.number);
            } else {
              const { owner, repo } = context.repo;
              const sha = context.payload.workflow_run?.head_sha || context.payload.check_suite?.head_sha;
              const resp = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner,
                repo,
                commit_sha: sha,
                mediaType: { previews: ['groot'] }
              });
              core.setOutput('number', resp.data.length > 0 ? resp.data[0].number : '');
            }
      - name: Wait for checks
        if: steps.pr.outputs.number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = process.env.PR_NUMBER;
            const { owner, repo } = context.repo;
            const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            const ref = pr.data.head.sha;
            const wait = ms => new Promise(r => setTimeout(r, ms));

            while (true) {
              const checks = await github.rest.checks.listForRef({ owner, repo, ref });
              const runs = checks.data.check_runs;
              const pending = runs.filter(r => !r.conclusion || r.conclusion === 'queued' || r.conclusion === 'in_progress');
              if (pending.length > 0) {
                await wait(5000);
                continue;
              }
              const failed = runs.find(r => !['success', 'skipped', 'neutral'].includes(r.conclusion));
              if (failed) {
                core.setFailed(`Check ${failed.name} concluded with ${failed.conclusion}`);
              }
              break;
            }
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
      - name: Merge primary PR
        if: steps.pr.outputs.number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ steps.pr.outputs.number }}
        run: |
          gh pr merge "$PR" --rebase --delete-branch || \
          gh pr merge "$PR" --squash --delete-branch
      - name: Rebase and merge remaining PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for n in $(gh pr list --state open --json number -q '.[].number'); do
            if [ "$n" != "${{ steps.pr.outputs.number }}" ]; then
              gh pr checkout "$n"
              git pull --rebase origin main || continue
              git push --force-with-lease
              gh pr merge "$n" --rebase --delete-branch || \
              gh pr merge "$n" --squash --delete-branch || true
            fi
          done
