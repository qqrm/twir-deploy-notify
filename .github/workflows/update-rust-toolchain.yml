name: TWIR Update Rust toolchain

on:
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    name: Update Rust toolchain
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Refresh toolchain version
        id: rust
        run: |
          set -euo pipefail

          python - <<'PY'
import os
import pathlib
import re
import urllib.request

DOC_PATH = pathlib.Path('DOCS/RUST_VERSION.md')
TOOLCHAIN_PATH = pathlib.Path('rust-toolchain.toml')
OUTPUT = pathlib.Path(os.environ['GITHUB_OUTPUT'])
SOURCE_URL = 'https://static.rust-lang.org/dist/channel-rust-stable.toml'

with urllib.request.urlopen(SOURCE_URL) as response:
    data = response.read().decode()

version_match = re.search(r"\[pkg\.rust\]\s+version = \"([^\"]+)\"", data)
date_match = re.search(r"^date\s*=\s*\"([^\"]+)\"", data, re.MULTILINE)
if not version_match:
    raise SystemExit('failed to locate stable toolchain version')
if not date_match:
    raise SystemExit('failed to locate channel release date')

latest = version_match.group(1).split()[0]
release_date = date_match.group(1)

current = None
if TOOLCHAIN_PATH.exists():
    current_match = re.search(r'^channel\s*=\s*"([0-9]+\.[0-9]+\.[0-9]+)"', TOOLCHAIN_PATH.read_text(), re.MULTILINE)
    if current_match:
        current = current_match.group(1)

if current is None and DOC_PATH.exists():
    current_match = re.search(r'`([0-9]+\.[0-9]+\.[0-9]+)`', DOC_PATH.read_text())
    if current_match:
        current = current_match.group(1)

changed = latest != current

with OUTPUT.open('a', encoding='utf-8') as fh:
    print(f'latest={latest}', file=fh)
    print(f'release_date={release_date}', file=fh)
    print(f'current={current or ""}', file=fh)
    print(f'changed={str(changed).lower()}', file=fh)

if not changed:
    raise SystemExit(0)

content = "\n".join([
    "# Rust Toolchain",
    "",
    "The automation tracks the latest stable Rust release used by the workflows.",
    "",
    f"- Version: `{latest}`",
    f"- Source: {SOURCE_URL}",
    f"- Updated: {release_date}",
    "",
])

DOC_PATH.write_text(content)

toolchain_content = "\n".join([
    "[toolchain]",
    f'channel = "{latest}"',
    'components = ["rustfmt", "clippy"]',
    "",
])

TOOLCHAIN_PATH.write_text(toolchain_content)
PY

      - name: Create pull request
        if: steps.rust.outputs.changed == 'true'
        id: pr
        uses: peter-evans/create-pull-request@v6
        with:
          branch: chore/update-rust-version-doc
          delete-branch: true
          commit-message: "chore: update Rust toolchain to ${{ steps.rust.outputs.latest }}"
          title: "chore: update Rust toolchain to ${{ steps.rust.outputs.latest }}"
          body: |
            ## Summary
            - update `rust-toolchain.toml` to ${{ steps.rust.outputs.latest }} (${{ steps.rust.outputs.release_date }})
            - record the resolved toolchain in `DOCS/RUST_VERSION.md`

            ## Testing
            - not run (automation change)
          labels: maintenance
          add-paths: |
            DOCS/RUST_VERSION.md
            rust-toolchain.toml

      - name: Enable auto-merge for toolchain PR
        if: steps.pr.outputs.pull-request-number && steps.pr.outputs.pull-request-operation != 'closed'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ steps.pr.outputs.pull-request-number }}
          merge-method: squash
